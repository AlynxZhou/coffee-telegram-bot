// Generated by CoffeeScript 2.2.4
(function() {
  var BotMaster, BotPoller, botUtils;

  botUtils = require("./bot-utils");

  BotPoller = require("./bot-poller");

  BotMaster = class BotMaster {
    constructor(botApi, BotServant, identify, destroyTimeout = 5 * 60 * 1000, pollingInterval = 500) {
      this.loop = this.loop.bind(this);
      this.onUpdates = this.onUpdates.bind(this);
      this.botApi = botApi;
      this.poller = new BotPoller(botApi, this.onUpdates, pollingInterval);
      this.BotServant = BotServant;
      this.identify = identify;
      this.destroyTimeout = destroyTimeout;
      this.bots = {};
      this.botName = "";
    }

    async loop(startCallback = null, stopCallback = null) {
      if (startCallback instanceof Function) {
        await startCallback();
      }
      this.botApi.getMe().then((res) => {
        this.botName = res["username"];
        this.botID = res["id"];
        botUtils.log(`${this.botName}#${this.botID}: I am listening ...`);
        return this.poller.startPollUpdates();
      });
      if (process.platform === "win32") {
        require("readline").createInterface({
          "input": process.stdin,
          "output": process.stdout
        }).on("SIGINT", function() {
          return process.emit("SIGINT");
        });
      }
      return process.on("SIGINT", async() => {
        var identifier;
        this.poller.stopPollUpdates();
        for (identifier in this.bots) {
          (async(identifier) => {
            if (this.bots[identifier].onRemove instanceof Function) {
              await this.bots[identifier].onRemove();
            }
            return delete this.bots[identifier];
          })(identifier);
        }
        if (stopCallback instanceof Function) {
          await stopCallback();
        }
        return process.exit();
      });
    }

    onUpdates(updates) {
      var i, identifier, len, results, update;
      for (i = 0, len = updates.length; i < len; i++) {
        update = updates[i];
        (async(update) => {
          var identifier;
          identifier = this.identify(update);
          if (this.bots[identifier] == null) {
            this.bots[identifier] = new this.BotServant(this.botApi, identifier, this.botName, this.botID);
            if (this.bots[identifier].onCreate instanceof Function) {
              await this.bots[identifier].onCreate();
            }
          }
          this.bots[identifier].processUpdate(update);
          return this.bots[identifier].lastActiveTime = Date.now();
        })(update);
      }
      if (this.destroyTimeout != null) {
        results = [];
        for (identifier in this.bots) {
          results.push((async(identifier) => {
            if (Date.now() - this.bots[identifier].lastActiveTime > this.destroyTimeout) {
              if (this.bots[identifier].onRemove instanceof Function) {
                await this.bots[identifier].onRemove();
              }
              return delete this.bots[identifier];
            }
          })(identifier));
        }
        return results;
      }
    }

  };

  module.exports = BotMaster;

}).call(this);
