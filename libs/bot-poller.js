// Generated by CoffeeScript 2.2.4
(function() {
  var BotPoller, botUtils;

  botUtils = require("./bot-utils");

  // A poller for polling updates, and send updates to a handle function.
  BotPoller = class BotPoller {
    constructor(botApi, onUpdates, opts = {}) {
      this.getUpdates = this.getUpdates.bind(this);
      this.skipUpdates = this.skipUpdates.bind(this);
      this.startPollUpdates = this.startPollUpdates.bind(this);
      this.pollUpdates = this.pollUpdates.bind(this);
      this.stopPollUpdates = this.stopPollUpdates.bind(this);
      this.botApi = botApi;
      this.onUpdates = onUpdates;
      this.pollingInterval = opts["pollingInterval"] || 700;
      this.skippingUpdates = opts["skippingUpdates"];
      this.isPolling = false;
      this.pollingID = null;
      this.pollingParam = {
        "offset": 0,
        "timeout": 1
      };
    }

    async getUpdates() {
      var error, updates;
      try {
        updates = (await this.botApi.getUpdates(this.pollingParam));
      } catch (error1) {
        error = error1;
        botUtils.error(error);
        updates = [];
      }
      return updates;
    }

    async skipUpdates() {
      var updates;
      this.pollingParam["offset"] = -1;
      updates = (await this.getUpdates());
      // Should be only one or zero update here.
      if (updates.length > 0) {
        return this.pollingParam["offset"] = updates[0]["update_id"] + 1;
      }
    }

    async startPollUpdates() {
      if (!this.isPolling) {
        if (this.skippingUpdates !== false) {
          await this.skipUpdates();
        }
        this.isPolling = true;
        this.pollUpdates();
      }
      return this.isPolling;
    }

    async pollUpdates() {
      var i, len, update, updateID, updates;
      updates = (await this.getUpdates());
      this.onUpdates(updates);
      updateID = 0;
      for (i = 0, len = updates.length; i < len; i++) {
        update = updates[i];
        if (updateID < update["update_id"]) {
          updateID = update["update_id"];
        }
      }
      if (updateID !== 0) {
        this.pollingParam["offset"] = updateID + 1;
      }
      return this.pollingID = setTimeout(this.pollUpdates, this.pollingInterval);
    }

    stopPollUpdates() {
      if (this.isPolling) {
        this.isPolling = false;
        clearTimeout(this.pollingID);
        this.pollingID = null;
      }
      return this.isPolling;
    }

  };

  module.exports = BotPoller;

}).call(this);
