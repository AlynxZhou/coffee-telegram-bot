// Generated by CoffeeScript 2.2.4
(function() {
  var BotPoller, botUtils;

  botUtils = require("./bot-utils");

  // A poller for polling updates, and send updates to a handle function.
  BotPoller = class BotPoller {
    constructor(botApi, onUpdates, skipUpdates = true, pollingInterval = 500) {
      this.startPollUpdates = this.startPollUpdates.bind(this);
      this.pollingUpdates = this.pollingUpdates.bind(this);
      this.stopPollUpdates = this.stopPollUpdates.bind(this);
      this.botApi = botApi;
      this.isPolling = false;
      this.pollingID = null;
      this.pollingParam = {
        "offset": (skipUpdates ? -1 : 0)
      };
      this.lastUpdateTime = null;
      this.pollingInterval = pollingInterval;
      this.onUpdates = onUpdates;
    }

    startPollUpdates() {
      if (!this.isPolling) {
        this.isPolling = true;
        this.pollingUpdates();
      }
      return this.isPolling;
    }

    pollingUpdates() {
      var updateID;
      updateID = 0;
      return this.botApi.getUpdates(this.pollingParam).then((updates) => {
        var i, len, update;
        this.lastUpdate = Date.now();
// botUtils.debug(JSON.stringify(updates, null, "  "))
        for (i = 0, len = updates.length; i < len; i++) {
          update = updates[i];
          (function(update) {
            // Only update offset when update is newer, prevent when older update
            // object was processed too slow in this async closure.
            // Update the id first or it will loop when process failed.
            if (updateID < update["update_id"]) {
              return updateID = update["update_id"];
            }
          })(update);
        }
        return this.onUpdates(updates);
      }).catch(botUtils.error).then(() => {
        // Always update offset after all update objects processed, or catched
        // an exception.
        this.pollingParam["offset"] = updateID + 1;
        return this.pollingID = setTimeout(this.pollingUpdates, this.pollingInterval);
      });
    }

    stopPollUpdates() {
      if (this.isPolling) {
        this.isPolling = false;
        clearTimeout(this.pollingID);
        this.pollingID = null;
      }
      return this.isPolling;
    }

  };

  module.exports = BotPoller;

}).call(this);
